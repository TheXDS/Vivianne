namespace TheXDS.Vivianne.Models.Carp.Nfs2;

/// <summary>
/// Describes Car performance data for NFS2 cars.
/// </summary>
public class CarPerf
{
    /// <summary>
    /// Gets or sets a value that indicates whether this Carp2 file is
    /// compressed.
    /// </summary>
    public bool IsCompressed { get; set; }

    /// <summary>
    /// Gets or sets the car mass in Kilograms.
    /// </summary>
    public double Mass { get; set; }

    /// <summary>
    /// Gets a value that indicates the number of defined gears.
    /// </summary>
    /// <remarks>
    /// Count includes reverse gear as well as neutral.
    /// </remarks>
    public int NumberOfGears { get; set; }

    /// <summary>
    /// Gets a value that indicates the number of game ticks of delay between
    /// gear shifts.
    /// </summary>
    public int GearShiftDelay { get; set; }

    /// <summary>
    /// Gets a collection of values that indicates the gear efficiency
    /// multiplier for any given gear.
    /// </summary>
    public IList<double> GearEfficiency { get; init; } = [];

    /// <summary>
    /// Gets a collection of values that indicate a factor to divide the RPM by
    /// to calculate the actual top speed in any given gear.
    /// </summary>
    public IList<double> VelocityToRpm { get; init; } = [];

    /// <summary>
    /// Gets a collection of values plotting the engine's torque curve, in
    /// Newton*Meters.
    /// </summary>
    public IList<double> TorqueCurve { get; init; } = [];

    /// <summary>
    /// Gets or sets a value that indicates the maximum engine RPM
    /// </summary>
    public int EngineMaxRpm { get; set; }

    /// <summary>
    /// Gets the maximum velocity this car can reach, in meters per second.
    /// </summary>
    /// <remarks>
    /// Speed calculation uses this value alongside the current RPM and the
    /// velocity to RPM tables to calculate the actual speed.
    /// </remarks>
    public double MaxVelocity { get; set; }

    /// <summary>
    /// Gets or sets a value between 0.0 and 1.0 that indicates the front drive
    /// ratio.
    /// </summary>
    public double FrontDriveRatio { get; set; }

    /// <summary>
    /// Gets a value that indicates the maximum deceleration while braking.
    /// </summary>
    public double MaxBrakeDecel { get; set; }

    /// <summary>
    /// Gets or sets a value between 0.0 and 1.0 that indicates the braking
    /// bias to the front brakes.
    /// </summary>
    public double FrontBrakeBias { get; set; }

    /// <summary>
    /// Gets a collection of values taht indicates how the gas increases when
    /// applied.
    /// </summary>
    public IList<byte> GasIncreaseCurve { get; init; } = [];

    /// <summary>
    /// Gets a collection of values taht indicates how the gas decreases when
    /// released.
    /// </summary>
    public IList<byte> GasDecreaseCurve { get; init; } = [];

    /// <summary>
    /// Gets a collection of values taht indicates how the brakes increase when
    /// applied.
    /// </summary>
    public IList<byte> BrakeIncreaseCurve { get; init; } = [];

    /// <summary>
    /// Gets a collection of values taht indicates how the brakes decrease when
    /// released.
    /// </summary>
    public IList<byte> BrakeDecreaseCurve { get; init; } = [];

    /// <summary>
    /// Gets or sets a value that indicates the wheel base for the car (the
    /// distance between front and rear tires).
    /// </summary>
    public float WheelBase { get; set; }

    /// <summary>
    /// Gets or sets a value from 0.0 to 1.0 indicating the Bias in grip
    /// between the front and rear of the car.
    /// </summary>
    public double FrontGripBias { get; set; }

    /// <summary>
    /// Gets or sets the "Maximum steer acceleration" value.
    /// </summary>
    public double MaximumSteerAccel { get; set; }

    /// <summary>
    /// Gets or sets the "Turn-In ramp" value.
    /// </summary>
    public double TurnInRamp { get; set; }

    /// <summary>
    /// Gets or sets the "Turn-Out ramp" value.
    /// </summary>
    public double TurnOutRamp { get; set; }

    /// <summary>
    /// Gets or sets the "Lateral acceleration grip multiplier" value.
    /// </summary>
    public double LateralAccGripMult { get; set; }

    /// <summary>
    /// Gets or sets a value that indicates the multiplier to be applied to the
    /// aerodynamic downforce generated by the car while in movement.
    /// </summary>
    public double AeroDownMult { get; set; }

    /// <summary>
    /// Gets or sets the "Gas off" value.
    /// </summary>
    public double GasOffFactor { get; set; }

    /// <summary>
    /// Gets or sets the "G transfer factor" value.
    /// </summary>
    public double GTransferFactor { get; set; }

    /// <summary>
    /// Gets or sets the "Slide multiplier" value.
    /// </summary>
    public double SlideMult { get; set; }

    /// <summary>
    /// Gets or sets the "Spin velocity cap" value.
    /// </summary>
    public double SpinVelocityCap { get; set; }

    /// <summary>
    /// Gets or sets the "Slide velocity cap" value.
    /// </summary>
    public double SlideVelocityCap { get; set; }

    /// <summary>
    /// Gets or sets the "Slide assistance factor" value.
    /// </summary>
    public double SlideAssistanceFactor { get; set; }

    /// <summary>
    /// Gets or sets the "Push factor" value.
    /// </summary>
    public double PushFactor { get; set; }

    /// <summary>
    /// Gets or sets the "Low turn factor" value.
    /// </summary>
    public double LowTurnFactor { get; set; }

    /// <summary>
    /// Gets or sets the "High turn factor" value.
    /// </summary>
    public double HighTurnFactor { get; set; }
}
