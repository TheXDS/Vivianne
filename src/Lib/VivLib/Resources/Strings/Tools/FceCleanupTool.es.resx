<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="HeaderDamage_Arts_Title" xml:space="preserve">
    <value>Daño en encabezado: Número inesperado de artes</value>
  </data>
  <data name="HeaderDamage_Arts_Details" xml:space="preserve">
    <value>El encabezado indica que hay más de un arte definido en el archivo FCE. Esto no es consistente con la carga de archivos FSH en NFS3.</value>
  </data>
  <data name="StrayPartNames_1_Title" xml:space="preserve">
    <value>{0} nombre(s) de parte(s) huérfano(s)</value>
  </data>
  <data name="StrayPartNames_1_Details" xml:space="preserve">
    <value>Hay más nombres de partes que partes en el archivo FCE. Estos nombres sin utilizar se pueden remover de manera segura.</value>
  </data>
  <data name="StrayPartNames_2_Title" xml:space="preserve">
    <value>{0} parte(s) sin nombre</value>
  </data>
  <data name="StrayPartNames_2_Details" xml:space="preserve">
    <value>Hay más partes que nombres de partes en el archivo FCE. Se inferirá un nombre adecuado para las mismas. Por favor, verifique que las partes se encuentran en la ubicación correcta y que tienen un nombre adecuado.</value>
  </data>
  <data name="HeaderDamage_DummyCount_Details" xml:space="preserve">
    <value>El encabezado declara más partes Dummy que las soportadas en el formato FCE, lo que sugiere un sobreflujo de definiciones de partes Dummy. El número de partes Dummy se truncará a 16.</value>
  </data>
  <data name="HeaderDamage_DummyCount_Title" xml:space="preserve">
    <value>Daño en encabezado: Número inválido de Dummies</value>
  </data>
  <data name="BadTriangleFlags_comp" xml:space="preserve">
    <value>{0}: {1} triángulos con banderas inválidas</value>
  </data>
  <data name="BadTriangleFlags_Title" xml:space="preserve">
    <value>{0} triángulos con banderas inválidas</value>
  </data>
  <data name="BadTriangleFlags_Details" xml:space="preserve">
    <value>Las siguientes partes contienen triángulos con banderas de material inválidas:
{0}</value>
  </data>
  <data name="HeaderDamage_CarPartCount_Title" xml:space="preserve">
    <value>Recuento de partes de vehículo inválido</value>
  </data>
  <data name="HeaderDamage_CarPartCount_Details" xml:space="preserve">
    <value>El número de partes de vehículo declaradas se encuentra fuera del rango de valores válidos.</value>
  </data>
  <data name="HeaderDamage_ColorCount_Title" xml:space="preserve">
    <value>Recuento de colores primarios inválido</value>
  </data>
  <data name="HeaderDamage_ColorCount_Details" xml:space="preserve">
    <value>El número de colores declarados se encuentra fuera del rango de valores válidos.</value>
  </data>
  <data name="HeaderDamage_ColorMismatch_Title" xml:space="preserve">
    <value>Discrepancia de colores primarios/secundarios</value>
  </data>
  <data name="HeaderDamage_ColorMismatch_Details" xml:space="preserve">
    <value>El número de colores primarios y secundarios declarados no coincide.</value>
  </data>
</root>